// Generated by CoffeeScript 1.6.3
(function() {
  var Interviewer, accessToken, allSlots, authorizationUrl, comingWeek, countAvailableSlots, day, email, freeSlots, getBusyFree, getEmailAddresses, googleClientId, i, interviewers, isFreeAtATime, isTokenValid, knownEmailAddresses, nextDay, params, parseParams, permutationsExhausted, permuteUntilSlotsWork, redirectUri, results, slotsThatWork, today, workingSlots, _i, _j, _k, _len, _len1;

  knownEmailAddresses = ['willem.vanbergen@jadedpixel.com', 'aaron.olson@shopify.com', 'cody@shopify.com', 'florian.weingarten@shopify.com'];

  for (_i = 0, _len = knownEmailAddresses.length; _i < _len; _i++) {
    email = knownEmailAddresses[_i];
    $('select[name="email-addresses"]').append("<option>" + email + "</option>");
  }

  getEmailAddresses = function() {
    var emails;
    return emails = $('select[name="email-addresses"]').val();
  };

  $("#go").click(function() {
    var emailAddresses;
    emailAddresses = getEmailAddresses();
    return getBusyFree(accessToken, emailAddresses);
  });

  googleClientId = '131318130111-kffqdc1iu7ot57s92ep3h36scsf2b38o.apps.googleusercontent.com';

  redirectUri = "http%3A%2F%2Flocalhost:4567/oauth2callback";

  authorizationUrl = "https://accounts.google.com/o/oauth2/auth?redirect_uri=" + redirectUri + "&response_type=token&client_id=" + googleClientId + "&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcalendar.readonly&approval_prompt=auto";

  $("button[name='authorize-with-google'").click(function() {
    console.log("Redirecting to Google authorization URL");
    return document.location.assign(authorizationUrl);
  });

  parseParams = function() {
    var chunk, params, queryString, regex;
    params = {};
    queryString = location.hash.substring(1);
    regex = /([^&=]+)=([^&]*)/g;
    while (chunk = regex.exec(queryString)) {
      params[decodeURIComponent(chunk[1])] = decodeURIComponent(chunk[2]);
    }
    return params;
  };

  isTokenValid = function(accessToken, callback) {
    var tokenInfoUrl;
    tokenInfoUrl = "https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=" + accessToken;
    jQuery.getJSON(tokenInfoUrl).done(function(json) {
      var validity;
      if (json.audience === googleClientId) {
        validity = true;
      }
      return callback(validity);
    }).fail(function(jqxhr, textStatus, error) {
      console.log("Request failed: " + textStatus + " " + error);
      return callback(false);
    });
    return void 0;
  };

  params = parseParams();

  accessToken = params.access_token;

  if (accessToken) {
    isTokenValid(params["access_token"], function(validity) {
      console.log("Is token valid? " + validity);
      if (!validity) {
        return alert("Looks like we need to re-authenticate with Google. Could you try hitting that button again?");
      }
    });
  }

  getBusyFree = function(accessToken, emailAddresses) {
    var currentDate, data, tenDaysFromNow, url;
    url = "https://www.googleapis.com/calendar/v3/freeBusy?access_token=" + accessToken;
    currentDate = new Date;
    tenDaysFromNow = new Date;
    tenDaysFromNow.setHours(currentDate.getHours() + 24 * 10);
    data = {
      timeMin: currentDate.toISOString(),
      timeMax: tenDaysFromNow,
      timeZone: "-05:00",
      items: (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = emailAddresses.length; _j < _len1; _j++) {
          email = emailAddresses[_j];
          _results.push({
            "id": email
          });
        }
        return _results;
      })()
    };
    return jQuery.ajax({
      type: "POST",
      url: url,
      data: JSON.stringify(data),
      success: function(json) {
        console.log("Check out this awesome busy/free list:");
        return console.log(json);
      },
      dataType: 'json',
      contentType: 'application/json'
    });
  };

  results = {
    "kind": "calendar#freeBusy",
    "timeMin": "2013-11-30T05:00:00.000Z",
    "timeMax": "2013-12-07T05:00:00.000Z",
    "calendars": {
      "willem.vanbergen@jadedpixel.com": {
        "busy": [
          {
            "start": "2013-12-02T15:00:00Z",
            "end": "2013-12-02T15:15:00Z"
          }, {
            "start": "2013-12-02T15:30:00Z",
            "end": "2013-12-02T16:00:00Z"
          }, {
            "start": "2013-12-02T18:00:00Z",
            "end": "2013-12-02T18:50:00Z"
          }, {
            "start": "2013-12-02T21:00:00Z",
            "end": "2013-12-02T22:00:00Z"
          }, {
            "start": "2013-12-04T15:00:00Z",
            "end": "2013-12-04T16:00:00Z"
          }
        ]
      },
      "justin.mutter@jadedpixel.com": {
        "busy": [
          {
            "start": "2013-12-02T15:30:00Z",
            "end": "2013-12-02T17:00:00Z"
          }, {
            "start": "2013-12-02T18:00:00Z",
            "end": "2013-12-02T19:00:00Z"
          }, {
            "start": "2013-12-03T15:30:00Z",
            "end": "2013-12-03T16:15:00Z"
          }, {
            "start": "2013-12-03T16:30:00Z",
            "end": "2013-12-03T16:45:00Z"
          }, {
            "start": "2013-12-04T15:30:00Z",
            "end": "2013-12-04T16:15:00Z"
          }, {
            "start": "2013-12-04T16:30:00Z",
            "end": "2013-12-04T16:45:00Z"
          }, {
            "start": "2013-12-04T20:00:00Z",
            "end": "2013-12-04T21:00:00Z"
          }, {
            "start": "2013-12-05T15:30:00Z",
            "end": "2013-12-05T16:15:00Z"
          }, {
            "start": "2013-12-05T16:30:00Z",
            "end": "2013-12-05T16:45:00Z"
          }, {
            "start": "2013-12-05T18:30:00Z",
            "end": "2013-12-05T19:00:00Z"
          }, {
            "start": "2013-12-06T15:30:00Z",
            "end": "2013-12-06T16:15:00Z"
          }, {
            "start": "2013-12-06T16:30:00Z",
            "end": "2013-12-06T16:45:00Z"
          }, {
            "start": "2013-12-06T19:00:00Z",
            "end": "2013-12-06T19:30:00Z"
          }
        ]
      }
    }
  };

  isFreeAtATime = function(busyTimes, time) {};

  freeSlots = function(busyTimes) {};

  allSlots = function(emails) {};

  countAvailableSlots = function(freeBusySlots) {};

  slotsThatWork = function(day, interviewers) {
    interviewers;
    workingSlots;
    var interviewer, timeframe, _j, _k, _len1, _len2;
    for (_j = 0, _len1 = timeframes.length; _j < _len1; _j++) {
      timeframe = timeframes[_j];
      for (_k = 0, _len2 = interviewers.length; _k < _len2; _k++) {
        interviewer = interviewers[_k];
        if (doesTimeframeWork(interviewer, timeframe)) {
          workingSlots << [timeframe, interviewer];
          removeInterviewer(interviewer);
          break;
        }
      }
    }
    return workingslots;
  };

  permutationsExhausted = function() {};

  permuteUntilSlotsWork = function(interviewers) {
    var permutations, _results;
    slotsThatWork = [];
    permutations = 1;
    _results = [];
    while (slotsThatWork.length === interviewers || permutationsExhausted(interviewers, permutations)) {
      interviewers = permuteInterviewers(interviewers, permutations);
      _results.push(slotsThatWork = slotsThatWork(day, interviewers));
    }
    return _results;
  };

  nextDay = function(date, advance) {
    date = new Date(today);
    date.setHours(0);
    date.setMinutes(0);
    date.setSeconds(0);
    date.setHours(24 * advance);
    return date;
  };

  comingWeek = [];

  today = new Date();

  for (i = _j = 0; _j <= 6; i = _j += 1) {
    comingWeek.push(nextDay(today, i));
  }

  Interviewer = (function() {
    function Interviewer(email, slotsAvailable) {
      this.email = email;
      this.slotsAvailable = slotsAvailable;
    }

    return Interviewer;

  })();

  interviewers = ['...'];

  for (_k = 0, _len1 = comingWeek.length; _k < _len1; _k++) {
    day = comingWeek[_k];
    workingSlots = permuteUntilSlotsWork(day, interviewers);
  }

}).call(this);
