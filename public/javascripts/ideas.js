// Generated by CoffeeScript 1.6.3
(function() {
  var Interviewer, accessToken, assert, authorizationUrl, busyFree, comingWeek, email, exampleJSONresponseToBusyFree, getBusyFree, getCalendarList, getEmailAddresses, googleClientId, i, interviewers, isTokenValid, knownEmailAddresses, nextDay, params, parseParams, redirectUri, slotsAvailable, today, _i, _j, _len;

  googleClientId = '131318130111-kffqdc1iu7ot57s92ep3h36scsf2b38o.apps.googleusercontent.com';

  redirectUri = "http%3A%2F%2Flocalhost:4567/oauth2callback";

  authorizationUrl = "https://accounts.google.com/o/oauth2/auth?redirect_uri=" + redirectUri + "&response_type=token&client_id=" + googleClientId + "&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcalendar.readonly&approval_prompt=auto";

  $("button[name='authorize-with-google'").click(function() {
    console.log("Redirecting to Google authorization URL");
    return document.location.assign(authorizationUrl);
  });

  parseParams = function() {
    var chunk, params, queryString, regex;
    params = {};
    queryString = location.hash.substring(1);
    regex = /([^&=]+)=([^&]*)/g;
    while (chunk = regex.exec(queryString)) {
      params[decodeURIComponent(chunk[1])] = decodeURIComponent(chunk[2]);
    }
    return params;
  };

  params = parseParams();

  console.log(params);

  accessToken = params.access_token;

  isTokenValid = function(accessToken, callback) {
    var tokenInfoUrl;
    tokenInfoUrl = "https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=" + accessToken;
    jQuery.getJSON(tokenInfoUrl).done(function(json) {
      var validity;
      if (json.audience === googleClientId) {
        validity = true;
      }
      console.log("Checked validation of token with Google: " + validity);
      callback(validity);
      return validity;
    }).fail(function(jqxhr, textStatus, error) {
      console.log("Request failed: " + textStatus + " " + error);
      return callback(false);
    });
    return void 0;
  };

  isTokenValid(params["access_token"], function(validity) {
    return console.log("Is token valid? " + validity);
  });

  getCalendarList = function(accessToken) {
    var maxResults, url;
    maxResults = 10;
    url = "https://www.googleapis.com/calendar/v3/users/me/calendarList?maxResults=" + maxResults + "&access_token=" + accessToken;
    return jQuery.getJSON(url).done(function(json) {
      console.log("Check out this sweet list of calendars:");
      return console.log(json);
    }).fail(function(jqxhr, textStatus, error) {
      return console.log("Request failed: " + textStatus + " " + error);
    });
  };

  getBusyFree = function(accessToken) {
    var data, url;
    url = "https://www.googleapis.com/calendar/v3/freeBusy?access_token=" + accessToken;
    data = {
      timeMin: "2013-11-30T00:00:00-05:00",
      timeMax: "2013-12-07T00:00:00-05:00",
      timeZone: "-05:00",
      items: [
        {
          id: "willem.vanbergen@jadedpixel.com"
        }, {
          id: "justin.mutter@jadedpixel.com"
        }
      ]
    };
    return jQuery.ajax({
      type: "POST",
      url: url,
      data: JSON.stringify(data),
      success: function(json) {
        console.log("Check out this awesome busy/free list:");
        return console.log(json);
      },
      dataType: 'json',
      contentType: 'application/json'
    });
  };

  getBusyFree(accessToken);

  knownEmailAddresses = ['willem.vanbergen@jadedpixel.com', 'aaron.olson@shopify.com', 'cody@shopify.com', 'florian.weingarten@shopify.com'];

  for (_i = 0, _len = knownEmailAddresses.length; _i < _len; _i++) {
    email = knownEmailAddresses[_i];
    $('select[name="email-addresses"]').append("<option>" + email + "</option>");
  }

  getEmailAddresses = function() {
    var emails;
    emails = $('select[name="email-addresses"]').val();
    return console.log(emails);
  };

  $("#go").click(function() {
    return getEmailAddresses();
  });

  assert = function(condition, message) {
    if (!condition) {
      throw message || "Assertion failed";
    }
  };

  Interviewer = (function() {
    function Interviewer(email, slotsAvailable) {
      this.email = email;
      this.slotsAvailable = slotsAvailable;
    }

    return Interviewer;

  })();

  nextDay = function(date, advance) {
    date = new Date(today);
    date.setHours(0);
    date.setMinutes(0);
    date.setSeconds(0);
    date.setHours(24 * advance);
    return date;
  };

  comingWeek = [];

  today = new Date();

  for (i = _j = 0; _j <= 6; i = _j += 1) {
    comingWeek.push(nextDay(today, i));
  }

  today = new Date;

  console.log(nextDay(today, 1));

  console.log(nextDay(today, 2));

  console.log(nextDay(today, 3));

  console.log(comingWeek);

  exampleJSONresponseToBusyFree = '{\n  "kind": "calendar#freeBusy",\n  "timeMin": "2013-11-30T05:00:00.000Z",\n  "timeMax": "2013-12-07T05:00:00.000Z",\n  "calendars": {\n    "willem.vanbergen@jadedpixel.com": {\n      "busy": [\n        {\n          "start": "2013-12-02T15:00:00Z",\n          "end": "2013-12-02T15:15:00Z"\n        },\n        {\n          "start": "2013-12-02T15:30:00Z",\n          "end": "2013-12-02T16:00:00Z"\n        },\n        {\n          "start": "2013-12-02T18:00:00Z",\n          "end": "2013-12-02T18:50:00Z"\n        },\n        {\n          "start": "2013-12-02T21:00:00Z",\n          "end": "2013-12-02T22:00:00Z"\n        },\n        {\n          "start": "2013-12-04T15:00:00Z",\n          "end": "2013-12-04T16:00:00Z"\n        }\n      ]\n    },\n    "justin.mutter@jadedpixel.com": {\n      "busy": [\n        {\n          "start": "2013-12-02T15:30:00Z",\n          "end": "2013-12-02T17:00:00Z"\n        },\n        {\n          "start": "2013-12-02T18:00:00Z",\n          "end": "2013-12-02T19:00:00Z"\n        },\n        {\n          "start": "2013-12-03T15:30:00Z",\n          "end": "2013-12-03T16:15:00Z"\n        },\n        {\n          "start": "2013-12-03T16:30:00Z",\n          "end": "2013-12-03T16:45:00Z"\n        },\n        {\n          "start": "2013-12-04T15:30:00Z",\n          "end": "2013-12-04T16:15:00Z"\n        },\n        {\n          "start": "2013-12-04T16:30:00Z",\n          "end": "2013-12-04T16:45:00Z"\n        },\n        {\n          "start": "2013-12-04T20:00:00Z",\n          "end": "2013-12-04T21:00:00Z"\n        },\n        {\n          "start": "2013-12-05T15:30:00Z",\n          "end": "2013-12-05T16:15:00Z"\n        },\n        {\n          "start": "2013-12-05T16:30:00Z",\n          "end": "2013-12-05T16:45:00Z"\n        },\n        {\n          "start": "2013-12-05T18:30:00Z",\n          "end": "2013-12-05T19:00:00Z"\n        },\n        {\n          "start": "2013-12-06T15:30:00Z",\n          "end": "2013-12-06T16:15:00Z"\n        },\n        {\n          "start": "2013-12-06T16:30:00Z",\n          "end": "2013-12-06T16:45:00Z"\n        },\n        {\n          "start": "2013-12-06T19:00:00Z",\n          "end": "2013-12-06T19:30:00Z"\n        }\n      ]\n    }\n  }\n}';

  busyFree = JSON.parse(exampleJSONresponseToBusyFree);

  console.log(busyFree);

  interviewers = [];

  interviewers.push(new Interviewer(email = "willem@bla.com", slotsAvailable = ['some', 'slots']));

}).call(this);
